#+OPTIONS: toc:nil ^:{}
[[https://img.shields.io/npm/v/@keepzen/pipe.js.svg]]
[[https://img.shields.io/npm/dm/@keepzen/pipe.js.svg]]
[[https://img.shields.io/npm/dt/@keepzen/pipe.js.svg]]

#+TOC: headlines 2
* Pipe
** Make a pipable

Pipable is a object, which have a method named =.pipe(fun,...args)=.

You can get a new pipable object as fellow ways:

#+include: "./pipe.test.js" src js :lines "1-16"

As then snippet showed, a =pipable= object have methods as fellow:
+ =pipable.valueOf()= : Get the =v= you want to pipe to other function.

  So ~pipe(a).valueOf() === a~ is always =true=, as show:

<code language="js">
#+include: "./pipe.test.js" src js :lines "30-42"
</code>

  If =a= is primary type but neither =null= nor =undefined= then ~pipe(a) == a~
  is true.
#+include: "./pipe.test.js" src js :lines "17-29"

+ =pipable.pipe(fun,...args)= : Return a pipable object.

  =fun= is a function, =args= are the rest arguments you want pipe to =fun=.

  + If =args= do not included placeholder ~_~, =fun= will be called as
   =fun(...[v,...args])=.

  + If =args= included one and only one placeholder ~_~, =pipable.valueOf()= will 
   instead of the placehoder, and =fun= will be called as 
   =fun(...args)=.

+ =pipable.map(fun,...args)= : =pipable.map= is the alias of =pipable.pipe=.
+ =pipable.promise_rescue(fun,...args)=: return a new pipable object.
  + when the ~pipable.vlaueOf()~ is a promise and the promise is reject, 
   the reject reason will pipe to =fun=.
  + when ~pipeable.valueOf()~ is not a promise, ~fun~ will been skiped and return 
   copy of ~pipable~.


  
** Use placeholder set which argument of =fun= take the pipe value
#+include: "./pipe.test.js" src js :lines "43-56"

** =pipable.pipe(fun,...args)= keep =pipable= immutable.
=pipable.pipe(fn,...args)= will return a new pipable object, not change the old one.

#+include: "./pipe.test.js" src js :lines "57-69"

** =pipable.pipe(fn,...args)= is lazy

The =fn= will not be called until the new =pipable.valueOf()= have been called.
As fellow show:

#+include: "./pipe.test.js" src js :lines "70-78"
** =pipable<Promise>.pipe(fn,...args)=
If the value of a pipable is a =Promise=, 
=pipable.pipe(fn)= pipe the resolve value of the promise to =fn=,
and return a new promise pipable.
*** Examaples
#+include: "pipe.test.js" src js :lines "70-92"

** =pipable<Promise>.promise_rescue=: ~(resolve[,reject])=>Promise~ 

Return a new pipable<Promise>.

If value of =pipable<Promise>= is reject, this method can rescue from the error.
#+include: "./pipe.test.js" src js :lines "93-117"
